// AUTOGENERATED FILE
// This file was generated from group-expr.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface GroupExprActionDict<T> extends BaseActionDict<T> {
  Expr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExprAnd?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  ExprOr?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  Term_name?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Term_not?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Term_expr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Term?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Quoted?: (this: NonterminalNode, arg0: TerminalNode, arg1: Node, arg2: TerminalNode) => T;
  groupName?: (this: NonterminalNode, arg0: IterationNode) => T;
  not?: (this: NonterminalNode, arg0: TerminalNode) => T;
  and?: (this: NonterminalNode, arg0: TerminalNode) => T;
  or?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface GroupExprSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: GroupExprActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: GroupExprActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: GroupExprActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: GroupExprActionDict<T>): this;
}

export interface GroupExprGrammar extends Grammar {
  createSemantics(): GroupExprSemantics;
  extendSemantics(superSemantics: GroupExprSemantics): GroupExprSemantics;
}

declare const grammar: GroupExprGrammar;
export default grammar;

