import type { IMiniFilesConfig } from '@tarojs/taro/types/compile';
import type { ViteAppMeta, ViteCompilerContext, ViteH5BuildConfig, ViteHarmonyBuildConfig, ViteMiniBuildConfig, VitePageMeta } from '@tarojs/taro/types/compile/viteCompilerContext';
import type { PluginContext } from 'rollup';
export declare class CompilerContext<T extends ViteH5BuildConfig | ViteHarmonyBuildConfig | ViteMiniBuildConfig> implements ViteCompilerContext<T> {
    static label: string;
    cwd: string;
    sourceDir: string;
    taroConfig: T;
    rawTaroConfig: T;
    frameworkExts: string[];
    app: ViteAppMeta;
    pages: VitePageMeta[];
    components?: VitePageMeta[];
    loaderMeta: any;
    logger: {
        info(msg: string): void;
        warn(msg: string): void;
        error(msg: string): void;
    };
    filesConfig: IMiniFilesConfig;
    configFileList: string[];
    compilePage: (pageName: string) => VitePageMeta;
    constructor(appPath: string, rawTaroConfig: T);
    protected process(): void;
    protected processConfig(): void;
    watchConfigFile(rollupCtx: PluginContext): void;
    getAppScriptPath(): string;
    getApp(): ViteAppMeta;
    getPages(): VitePageMeta[];
    getComponents(): VitePageMeta[];
    /** 工具函数 */
    isApp(id: string): boolean;
    isPage(id: string): boolean;
    isComponent(id: string): boolean;
    isNativePageORComponent(templatePath: string): boolean;
    getPageById(id: string): VitePageMeta | undefined;
    getComponentById(id: string): VitePageMeta | undefined;
    getConfigFilePath(filePath: string): string;
    getTargetFilePath(filePath: string, targetExtName: string): string;
}
