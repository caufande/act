"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaroCompilerContext = void 0;
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const shared_1 = require("@tarojs/shared");
const defaultConfig_mini_1 = __importDefault(require("../../defaultConfig/defaultConfig.mini"));
const utils_1 = require("../../utils");
const component_1 = require("../../utils/component");
const base_1 = require("./base");
class TaroCompilerContext extends base_1.CompilerContext {
    constructor(appPath, taroConfig) {
        super(appPath, taroConfig);
        this.nativeComponents = new Map();
        this.compilePage = (pageName) => {
            const { sourceDir, frameworkExts } = this;
            const scriptPath = (0, helper_1.resolveMainFilePath)(node_path_1.default.join(sourceDir, pageName), frameworkExts);
            const templatePath = this.getTemplatePath(scriptPath);
            const isNative = this.isNativePageORComponent(templatePath);
            const configPath = isNative
                ? this.getConfigPath(scriptPath)
                : this.getConfigFilePath(scriptPath);
            const config = (0, helper_1.readConfig)(configPath, this.taroConfig) || {};
            const pageMeta = {
                name: pageName,
                scriptPath,
                configPath,
                config,
                isNative,
                templatePath: isNative ? templatePath : undefined,
                cssPath: isNative ? this.getStylePath(scriptPath) : undefined,
            };
            this.filesConfig[this.getConfigFilePath(pageMeta.name)] = {
                path: configPath,
                content: config
            };
            this.collectNativeComponents(pageMeta);
            this.configFileList.push(pageMeta.configPath);
            return pageMeta;
        };
        this.fileType = this.taroConfig.fileType;
        this.commonChunks = this.getCommonChunks();
        this.app = this.getApp();
        this.collectNativeComponents(this.app);
        this.pages = this.getPages();
    }
    processConfig() {
        this.taroConfig = (0, helper_1.recursiveMerge)({}, defaultConfig_mini_1.default, this.rawTaroConfig);
    }
    getCommonChunks() {
        const { commonChunks } = this.taroConfig;
        const defaultCommonChunks = ['runtime', 'vendors', 'taro', 'common'];
        let customCommonChunks = defaultCommonChunks;
        if ((0, shared_1.isFunction)(commonChunks)) {
            customCommonChunks = commonChunks(defaultCommonChunks.concat()) || defaultCommonChunks;
        }
        else if ((0, shared_1.isArray)(commonChunks) && commonChunks.length) {
            customCommonChunks = commonChunks;
        }
        return customCommonChunks;
    }
    collectNativeComponents(meta) {
        const { name, scriptPath, config } = meta;
        const { usingComponents } = config;
        if (!usingComponents)
            return;
        Object.entries(usingComponents).forEach(([compName, compPath]) => {
            const alias = this.taroConfig.alias;
            if ((0, helper_1.isAliasPath)(compPath, alias)) {
                compPath = (0, helper_1.replaceAliasPath)(scriptPath, compPath, alias);
                usingComponents[compName] = compPath;
            }
            const compScriptPath = (0, helper_1.resolveMainFilePath)(node_path_1.default.resolve(node_path_1.default.dirname(scriptPath), compPath));
            if (this.nativeComponents.has(compScriptPath))
                return;
            const configPath = this.getConfigPath(compScriptPath);
            const templatePath = this.getTemplatePath(compScriptPath);
            const cssPath = this.getStylePath(compScriptPath);
            if (!helper_1.fs.existsSync(compScriptPath)) {
                return this.logger.warn(`找不到页面 ${name} 依赖的自定义组件：${compScriptPath}`);
            }
            const nativeCompMeta = {
                name: (0, utils_1.getComponentName)(this, compScriptPath),
                scriptPath: compScriptPath,
                configPath,
                config: (0, helper_1.readConfig)(configPath) || {},
                templatePath,
                cssPath,
                isNative: true
            };
            this.filesConfig[this.getConfigFilePath(nativeCompMeta.name)] = {
                path: configPath,
                content: nativeCompMeta.config
            };
            this.nativeComponents.set(compScriptPath, nativeCompMeta);
            this.configFileList.push(nativeCompMeta.configPath);
            if (!component_1.componentConfig.thirdPartyComponents.has(compName) && !meta.isNative) {
                component_1.componentConfig.thirdPartyComponents.set(compName, new Set());
            }
            this.collectNativeComponents(nativeCompMeta);
        });
    }
    /** 工具函数 */
    getScriptPath(filePath) {
        return this.getTargetFilePath(filePath, this.fileType.script);
    }
    getTemplatePath(filePath) {
        return this.getTargetFilePath(filePath, this.fileType.templ);
    }
    getStylePath(filePath) {
        return this.getTargetFilePath(filePath, this.fileType.style);
    }
    getConfigPath(filePath) {
        return this.getTargetFilePath(filePath, this.fileType.config);
    }
}
exports.TaroCompilerContext = TaroCompilerContext;
//# sourceMappingURL=mini.js.map