"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaroCompilerContext = exports.readJsonSync = void 0;
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const shared_1 = require("@tarojs/shared");
const json5_1 = __importDefault(require("json5"));
const defaultConfig_harmony_1 = __importDefault(require("../../defaultConfig/defaultConfig.harmony"));
const page_1 = require("../../harmony/page");
const component_1 = require("../../utils/component");
const __1 = require("..");
const base_1 = require("./base");
function readJsonSync(file) {
    const ext = node_path_1.default.extname(file);
    if (ext === '.json5') {
        const raw = helper_1.fs.readFileSync(file, 'utf-8');
        return json5_1.default.parse(raw);
    }
    return helper_1.fs.readJSONSync(file);
}
exports.readJsonSync = readJsonSync;
class TaroCompilerContext extends base_1.CompilerContext {
    constructor(appPath, taroConfig) {
        var _a, _b, _c, _d;
        super(appPath, taroConfig);
        // 用于插件去拓展额外的组件
        this.extraComponents = [];
        this.nativeExt = ['.ets'];
        this.nativeComponents = new Map();
        this.ohpmPackageList = [];
        this.compilePage = (pageName) => {
            const { sourceDir, frameworkExts, nativeExt } = this;
            const scriptPath = (0, helper_1.resolveMainFilePath)(node_path_1.default.join(sourceDir, pageName), frameworkExts);
            const nativePath = (0, helper_1.resolveMainFilePath)(node_path_1.default.join(sourceDir, pageName), nativeExt);
            const configPath = this.getConfigFilePath(scriptPath);
            const config = (0, helper_1.readConfig)(configPath, this.taroConfig) || {};
            const pageMeta = {
                name: pageName,
                scriptPath,
                configPath,
                config,
                isNative: this.isNativePageORComponent(nativePath),
            };
            this.filesConfig[this.getConfigFilePath(pageMeta.name)] = {
                path: configPath,
                content: config,
            };
            // 编译原生组件的时候，不要把 pages 里引用的自定义组件带上
            if (!this.taroConfig.isBuildNativeComp) {
                this.collectNativeComponents(pageMeta);
            }
            this.configFileList.push(pageMeta.configPath);
            return pageMeta;
        };
        // 收集所有配置定义的鸿蒙
        this.ohpmPackageList = Object.values((_c = (_b = (_a = this.taroConfig) === null || _a === void 0 ? void 0 : _a.harmony) === null || _b === void 0 ? void 0 : _b.ohPackage) !== null && _c !== void 0 ? _c : {}).reduce((acc, cur) => {
            return [...acc, ...Object.keys(cur)];
        }, []);
        this.fileType = this.taroConfig.fileType;
        this.useETS = taroConfig.useETS !== false;
        this.useJSON5 = taroConfig.useJSON5 !== false;
        this.commonChunks = this.getCommonChunks();
        this.app = this.getApp();
        this.pages = this.getPages();
        this.collectNativeComponents(this.app);
        if (this.taroConfig.isBuildNativeComp) {
            this.components = this.getComponents();
            ((_d = this.components) === null || _d === void 0 ? void 0 : _d.length) > 0 &&
                this.components.forEach((component) => {
                    this.collectNativeComponents(component);
                });
        }
    }
    processConfig() {
        this.taroConfig = (0, helper_1.recursiveMerge)({}, defaultConfig_harmony_1.default, this.rawTaroConfig);
    }
    getCommonChunks() {
        const { commonChunks } = this.taroConfig;
        const defaultCommonChunks = ['runtime', 'vendors', 'taro', 'common'];
        let customCommonChunks = defaultCommonChunks;
        if ((0, shared_1.isFunction)(commonChunks)) {
            customCommonChunks = commonChunks(defaultCommonChunks.concat()) || defaultCommonChunks;
        }
        else if ((0, shared_1.isArray)(commonChunks) && commonChunks.length) {
            customCommonChunks = commonChunks;
        }
        return customCommonChunks;
    }
    collectNativeComponents(meta) {
        const { name, scriptPath, config } = meta;
        const { usingComponents } = config;
        if (!usingComponents)
            return;
        Object.entries(usingComponents).forEach(([compName, compPath]) => {
            var _a;
            const alias = this.taroConfig.alias;
            if ((0, helper_1.isAliasPath)(compPath, alias)) {
                compPath = (0, helper_1.replaceAliasPath)(scriptPath, compPath, alias);
                usingComponents[compName] = compPath;
            }
            // 如果是鸿蒙的包
            if (((_a = this.ohpmPackageList) === null || _a === void 0 ? void 0 : _a.length) && new RegExp(`^(${this.ohpmPackageList.join('|')})`).test(compPath)) {
                const nativeCompMeta = {
                    name: compName,
                    scriptPath: compPath,
                    config: {},
                    configPath: '',
                    isNative: true,
                    templatePath: compPath,
                    isPackage: true,
                };
                this.nativeComponents.set(compPath, nativeCompMeta);
                return;
            }
            const compScriptPath = (0, helper_1.resolveMainFilePath)(node_path_1.default.resolve(node_path_1.default.dirname(scriptPath), compPath));
            if (this.nativeComponents.has(compScriptPath))
                return;
            const ETSPath = this.getETSPath(compScriptPath);
            if (!helper_1.fs.existsSync(compScriptPath) || !ETSPath) {
                return this.logger.warn(`找不到页面 ${name} 依赖的自定义组件：${compScriptPath}`);
            }
            const nativeCompMeta = {
                name: compName.replace(/(\w)-(\w)/g, (_, p1, p2) => {
                    return p1 + p2.toUpperCase();
                }),
                scriptPath: compScriptPath,
                config: {},
                configPath: '',
                templatePath: ETSPath,
                isNative: true,
            };
            this.nativeComponents.set(compScriptPath, nativeCompMeta);
            if (!component_1.componentConfig.thirdPartyComponents.has(compName) && !meta.isNative) {
                component_1.componentConfig.thirdPartyComponents.set(compName, new Set());
            }
            this.collectNativeComponents(nativeCompMeta);
        });
    }
    modifyHarmonyResources(id = '', data = {}) {
        const { outputRoot = 'dist' } = this.taroConfig;
        const [, key, value] = id.match(/^\$(.+):(.+)$/) || [];
        if (!key || !value) {
            return console.warn(helper_1.chalk.red(`无效的资源 ID：${id}`));
        }
        const isProfile = key === 'profile';
        const targetPath = node_path_1.default.join(node_path_1.default.resolve(outputRoot, '..'), 'resources/base', isProfile ? 'profile' : 'element');
        const fileName = `${isProfile ? value : key}.json`;
        const configPath = node_path_1.default.join(targetPath, fileName);
        let config = {};
        try {
            config = readJsonSync(configPath);
        }
        catch (e) { } // eslint-disable-line no-empty
        if (isProfile) {
            Object.assign(config, data);
        }
        else {
            const list = config[key] || [];
            const idx = list.findIndex((item) => item.name === value);
            if (idx >= 0) {
                list[idx].value = data;
            }
            else {
                list.push({
                    name: value,
                    value: data,
                });
            }
        }
        helper_1.fs.ensureDirSync(node_path_1.default.dirname(configPath));
        helper_1.fs.writeJsonSync(configPath, config, { spaces: 2 });
    }
    // Note: 修改 harmony Hap 的配置文件，当前仅支持注入路由配置
    modifyHarmonyConfig(config = {}) {
        var _a, _b, _c, _d;
        var _e;
        const { tabBar } = config;
        const pages = (this.pages || []).map((item) => item.name);
        const { projectPath, hapName = 'entry', outputRoot = 'dist', name = 'default' } = this.taroConfig;
        const designWidth = this.taroConfig.designWidth || ((_c = (_b = (_a = this.taroConfig.postcss) === null || _a === void 0 ? void 0 : _a.pxtransform) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c.designWidth) || 750;
        const buildProfilePath = node_path_1.default.join(projectPath, `build-profile.${this.useJSON5 !== false ? 'json5' : 'json'}`);
        const srcPath = `./${hapName}`;
        const hapConfigPath = node_path_1.default.join(node_path_1.default.resolve(outputRoot, '..'), `${this.useJSON5 !== false ? 'module.json5' : 'config.json'}`);
        try {
            const profile = readJsonSync(buildProfilePath);
            profile.modules || (profile.modules = []);
            const target = profile.modules[0];
            if (target) {
                target.name = name;
                target.srcPath = srcPath;
            }
            else {
                profile.modules.push({
                    name,
                    srcPath,
                    targets: [
                        {
                            name: 'default',
                            applyToProducts: ['default'],
                        },
                    ],
                });
            }
            helper_1.fs.writeJsonSync(buildProfilePath, profile, { spaces: 2 });
            const hapConfig = readJsonSync(hapConfigPath);
            const window = {
                designWidth: (typeof designWidth === 'function' ? designWidth() : designWidth) || 750,
                autoDesignWidth: false,
            };
            hapConfig.module || (hapConfig.module = {});
            if (this.useJSON5 !== false) {
                let pageMetaId = '$profile:main_pages';
                // Stage 模型
                const target = hapConfig.module;
                if (target) {
                    const appId = config.appId || 'app';
                    const entryPath = node_path_1.default.join(this.taroConfig.outputRoot || 'dist', `${appId}.ets`);
                    const srcEntry = (0, __1.parseRelativePath)(node_path_1.default.dirname(hapConfigPath), entryPath);
                    target.name = name;
                    target.mainElement = appId;
                    const ability = (_d = target.abilities) === null || _d === void 0 ? void 0 : _d[0];
                    if (!this.taroConfig.blended && !this.taroConfig.isBuildNativeComp) {
                        if (ability) {
                            ability.name = appId;
                            ability.srcEntry = srcEntry;
                        }
                        else {
                            target.abilities || (target.abilities = []);
                            target.abilities.push({
                                name: appId,
                                srcEntry,
                                description: '$string:ability_desc',
                                icon: '$media:icon',
                                label: '$string:ability_label',
                                startWindowIcon: '$media:icon',
                                startWindowBackground: '$color:start_window_background',
                                exported: true,
                            });
                        }
                    }
                    if (typeof target.pages === 'string') {
                        pageMetaId = target.pages;
                    }
                    else {
                        target.pages = pageMetaId;
                    }
                }
                const etsPage = [];
                const tabBarList = (tabBar === null || tabBar === void 0 ? void 0 : tabBar.list) || [];
                const tabBarLength = tabBarList.length || 0;
                if (tabBarLength > 1) {
                    etsPage.push(page_1.TARO_TABBAR_PAGE_PATH);
                    etsPage.push(...pages.filter((item) => tabBarList.every((tab) => tab.pagePath !== item)));
                }
                else {
                    etsPage.push(...pages);
                }
                if (!this.taroConfig.isBuildNativeComp) {
                    this.modifyHarmonyResources(pageMetaId, {
                        src: etsPage,
                        window,
                    });
                }
                /**
                 * TOD0: 将 app 其配置为 mainElement 入口
                 */
            }
            else {
                // FA 模型
                (_e = hapConfig.module).js || (_e.js = []);
                const jsFAs = hapConfig.module.js;
                const target = jsFAs.find((item) => item.name === name);
                const mode = {
                    syntax: this.useETS ? 'ets' : 'hml',
                    type: 'pageAbility',
                };
                if (target) {
                    if (JSON.stringify(target.pages) === JSON.stringify(pages))
                        return;
                    target.mode = mode;
                    target.pages = pages;
                    target.window = window;
                }
                else {
                    jsFAs.push({
                        name,
                        mode,
                        pages,
                        window,
                    });
                }
            }
            helper_1.fs.writeJsonSync(hapConfigPath, hapConfig, { spaces: 2 });
        }
        catch (error) {
            console.warn(helper_1.chalk.red('设置鸿蒙 Hap 配置失败：', error));
        }
    }
    // Note: 更新 oh-package 中项目依赖声明
    modifyHostPackage(hmsDeps = {}, hmsDevDeps = {}) {
        const { projectPath, hapName = 'entry', ohPackage = {} } = this.taroConfig;
        const packageJsonFile = node_path_1.default.join(projectPath, hapName, `${this.useJSON5 !== false ? 'oh-package.json5' : 'package.json'}`);
        const isExists = helper_1.fs.pathExistsSync(packageJsonFile);
        if (!isExists)
            return;
        let pkg = readJsonSync(packageJsonFile);
        pkg.dependencies || (pkg.dependencies = {});
        for (const dep in hmsDeps) {
            pkg.dependencies[dep] = hmsDeps[dep];
        }
        pkg.devDependencies || (pkg.devDependencies = {});
        for (const dep in hmsDevDeps) {
            pkg.devDependencies[dep] = hmsDevDeps[dep];
        }
        pkg = (0, helper_1.recursiveMerge)(pkg, ohPackage);
        helper_1.fs.writeJsonSync(packageJsonFile, pkg, { spaces: 2 });
        return pkg;
    }
    /** 工具函数 */
    getScriptPath(filePath) {
        return this.getTargetFilePath(filePath, this.fileType.script);
    }
    getStylePath(filePath) {
        return this.getTargetFilePath(filePath, this.fileType.style);
    }
    getConfigPath(filePath) {
        return this.getTargetFilePath(filePath, this.fileType.config);
    }
    getETSPath(filePath) {
        return (0, helper_1.resolveSync)(filePath, { extensions: this.nativeExt });
    }
}
exports.TaroCompilerContext = TaroCompilerContext;
//# sourceMappingURL=harmony.js.map