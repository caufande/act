/// <reference types="node" />
import querystring from 'node:querystring';
import type { RollupBabelInputPluginOptions } from '@rollup/plugin-babel';
import type { IPostcssOption } from '@tarojs/taro/types/compile';
import type { TRollupResolveMethod } from '@tarojs/taro/types/compile/config/plugin';
import type { ViteH5BuildConfig, ViteH5CompilerContext, ViteHarmonyBuildConfig, ViteHarmonyCompilerContext, ViteMiniBuildConfig, ViteMiniCompilerContext, VitePageMeta } from '@tarojs/taro/types/compile/viteCompilerContext';
import type { CSSModulesOptions } from 'vite';
import type { Target } from 'vite-plugin-static-copy';
export declare function convertCopyOptions(taroConfig: ViteMiniBuildConfig | ViteH5BuildConfig | ViteHarmonyBuildConfig): Target[];
export declare function prettyPrintJson(obj?: {}): string;
export declare function getComponentName(viteCompilerContext: ViteH5CompilerContext | ViteHarmonyCompilerContext | ViteMiniCompilerContext, componentPath: string): string;
export declare const virtualModulePrefixREG: RegExp;
export declare function appendVirtualModulePrefix(id: string): string;
export declare function stripVirtualModulePrefix(id: string): string;
export declare function isVirtualModule(id: string): boolean;
export declare function isRelativePath(id: string | undefined): boolean;
export declare function stripMultiPlatformExt(id: string): string;
export declare const addLeadingSlash: (url?: string) => string;
export declare const addTrailingSlash: (url?: string) => string;
export declare const stripTrailingSlash: (url?: string) => string;
export declare function getMode(config: ViteH5BuildConfig | ViteHarmonyBuildConfig | ViteMiniBuildConfig): "none" | "production" | "development";
export declare function genRouterResource(page: VitePageMeta): string;
export declare function getQueryParams(path: string): querystring.ParsedUrlQuery;
export declare function generateQueryString(params: {
    [key: string]: string;
}): string;
export declare function getPostcssPlugins(appPath: string, option?: IPostcssOption, excludePluginNames?: string[]): any[];
export declare function getMinify(taroConfig: ViteMiniBuildConfig | ViteH5BuildConfig | ViteHarmonyBuildConfig): 'terser' | 'esbuild' | boolean;
export declare function getCSSModulesOptions(taroConfig: ViteMiniBuildConfig | ViteH5BuildConfig | ViteHarmonyBuildConfig): false | CSSModulesOptions;
export declare function getBabelOption(taroConfig: ViteMiniBuildConfig | ViteH5BuildConfig | ViteHarmonyBuildConfig, filterConfig?: {
    babelOption?: Partial<RollupBabelInputPluginOptions>;
    defaultInclude?: (string | RegExp)[];
    defaultExclude?: (string | RegExp)[];
}): RollupBabelInputPluginOptions;
export declare function escapePath(p: string): string;
export declare function parseRelativePath(from: string, to: string): string;
export declare function escapeId(id: string): string;
export declare function resolveAbsoluteRequire({ name, importer, outputRoot, targetRoot, code, resolve, modifyResolveId }: {
    importer: string;
    code: string;
    name?: string;
    outputRoot?: string;
    targetRoot?: string;
    resolve?: TRollupResolveMethod;
    modifyResolveId?: unknown;
}): string;
