"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runner_utils_1 = require("@tarojs/runner-utils");
const utils_1 = require("../utils");
function default_1(viteCompilerContext) {
    return {
        name: 'taro:vite-h5-pipeline',
        enforce: 'pre',
        buildStart() {
            return __awaiter(this, void 0, void 0, function* () {
                const { taroConfig } = viteCompilerContext;
                const isProd = (0, utils_1.getMode)(taroConfig) === 'production';
                // 下面这么写 是因为生产环境不需要异步，开发环境需要异步。是因为插件的执行顺序正确而这么写的
                isProd
                    ? this.load({ id: runner_utils_1.VITE_COMPILER_LABEL })
                    : yield this.load({ id: runner_utils_1.VITE_COMPILER_LABEL });
                const info = this.getModuleInfo(runner_utils_1.VITE_COMPILER_LABEL);
                if (info) {
                    info.meta = { viteCompilerContext };
                    viteCompilerContext.watchConfigFile(this);
                }
            });
        },
        load(id) {
            if (id === runner_utils_1.VITE_COMPILER_LABEL)
                return '';
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=pipeline.js.map