"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const postcss_h5_1 = require("../postcss/postcss.h5");
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
function default_1(viteCompilerContext) {
    const tabbarAssetsCache = new Map();
    const { taroConfig, app } = viteCompilerContext;
    const routerConfig = taroConfig.router || {};
    const isProd = (0, utils_1.getMode)(taroConfig) === 'production';
    const configPath = (0, helper_1.normalizePath)(app.configPath);
    return {
        name: 'taro:vite-h5-entry',
        enforce: 'pre',
        resolveId(source, importer, options) {
            return __awaiter(this, void 0, void 0, function* () {
                // mpa 模式关于 入口脚本文件 的处理已经解藕到 mpa.ts
                const resolved = yield this.resolve(source, importer, Object.assign(Object.assign({}, options), { skipSelf: true }));
                if ((resolved === null || resolved === void 0 ? void 0 : resolved.id) && resolved.id === configPath) {
                    const params = {
                        [constants_1.ENTRY_QUERY]: 'true'
                    };
                    const queryString = (0, utils_1.generateQueryString)(params);
                    return (0, utils_1.appendVirtualModulePrefix)(resolved.id + `?${queryString}`);
                }
                return null;
            });
        },
        load(id) {
            var _a;
            const queryParams = (0, utils_1.getQueryParams)(id);
            const encodeIsEntry = (queryParams === null || queryParams === void 0 ? void 0 : queryParams[constants_1.ENTRY_QUERY]) || '';
            const encodePagename = (queryParams === null || queryParams === void 0 ? void 0 : queryParams[constants_1.PAGENAME_QUERY]) || '';
            const isEntry = decodeURIComponent(encodeIsEntry);
            const pagename = decodeURIComponent(encodePagename);
            if (isEntry) {
                const appConfig = Object.assign({ router: routerConfig }, app.config);
                // runtime
                const runtimePath = Array.isArray(taroConfig.runtimePath) ? taroConfig.runtimePath : (taroConfig.runtimePath ? [taroConfig.runtimePath] : []);
                let setReconcilerPost = '';
                const setReconciler = runtimePath.reduce((res, item) => {
                    if (/^post:/.test(item)) {
                        setReconcilerPost += `import '${item.replace(/^post:/, '')}'\n`;
                        return res;
                    }
                    else {
                        return res + `import '${item}'\n`;
                    }
                }, '');
                const getTabbarIconPath = (iconPath) => {
                    return isProd
                        ? node_path_1.default.join('/', taroConfig.staticDirectory, 'images', node_path_1.default.basename(iconPath))
                        : iconPath.replace(/^./, '');
                };
                const emitTabbarIcon = (sourceDir, iconPath) => __awaiter(this, void 0, void 0, function* () {
                    const filePath = node_path_1.default.resolve(sourceDir, iconPath);
                    const fileName = node_path_1.default.join(taroConfig.staticDirectory, 'images', node_path_1.default.basename(iconPath));
                    if (!tabbarAssetsCache.get(fileName)) {
                        tabbarAssetsCache.set(fileName, filePath);
                        this.emitFile({
                            type: 'asset',
                            fileName,
                            source: yield helper_1.fs.readFile(filePath)
                        });
                        this.addWatchFile(filePath);
                    }
                });
                // tabbar
                let tabBarCode = '';
                if (appConfig.tabBar) {
                    tabBarCode = [
                        'var tabbarIconPath = []',
                        'var tabbarSelectedIconPath = []\n',
                    ].join('\n');
                    const tabbarList = appConfig.tabBar.list;
                    tabBarCode = tabbarList.reduce((prev, current, index) => {
                        if (current.iconPath) {
                            prev += `tabbarIconPath[${index}] = '${getTabbarIconPath(current.iconPath)}'\n`;
                        }
                        if (current.selectedIconPath) {
                            prev += `tabbarSelectedIconPath[${index}] = '${getTabbarIconPath(current.selectedIconPath)}'\n`;
                        }
                        return prev;
                    }, tabBarCode);
                    tabBarCode += [
                        'var tabbarList = config.tabBar.list',
                        'for (var i = 0; i < tabbarList.length; i++) {',
                        '  var t = tabbarList[i]',
                        '  if (t.iconPath) {',
                        '    t.iconPath = tabbarIconPath[i]',
                        '  }',
                        '  if (t.selectedIconPath) {',
                        '    t.selectedIconPath = tabbarSelectedIconPath[i]',
                        '  }',
                        '}',
                    ].join('\n');
                }
                // tabbar && pro
                if (appConfig.tabBar && !(0, helper_1.isEmptyObject)(appConfig.tabBar) && isProd) {
                    const list = appConfig.tabBar.list || [];
                    const { sourceDir } = viteCompilerContext;
                    list.forEach((item) => __awaiter(this, void 0, void 0, function* () {
                        const { iconPath, selectedIconPath } = item;
                        if (iconPath) {
                            yield emitTabbarIcon.bind(this)(sourceDir, iconPath);
                        }
                        if (selectedIconPath) {
                            yield emitTabbarIcon.bind(this)(sourceDir, selectedIconPath);
                        }
                    }));
                }
                const { getRoutesConfig, routerCreator } = viteCompilerContext.routerMeta;
                const routesConfig = getRoutesConfig(pagename);
                const { creator, creatorLocation, importFrameworkStatement, extraImportForWeb, execBeforeCreateWebApp, frameworkArgs, importFrameworkName, } = viteCompilerContext.loaderMeta;
                // pxTransform
                const __postcssOption = (0, postcss_h5_1.getDefaultPostcssConfig)({
                    designWidth: taroConfig.designWidth,
                    deviceRatio: taroConfig.deviceRatio,
                    option: taroConfig.postcss,
                    esnextModules: taroConfig.esnextModules || []
                });
                const [, pxtransformOption] = __postcssOption.find(([name]) => name === 'postcss-pxtransform') || [];
                const pxTransformConfig = (pxtransformOption === null || pxtransformOption === void 0 ? void 0 : pxtransformOption.config) || {};
                const routerMode = ((_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.router) === null || _a === void 0 ? void 0 : _a.mode) || 'hash';
                const historyCreator = routerMode === 'browser' ? 'createBrowserHistory' : routerMode === 'multi' ? 'createMpaHistory' : 'createHashHistory';
                const appMountHandler = appConfig.tabBar ? 'handleAppMountWithTabbar' : 'handleAppMount';
                return [
                    setReconciler,
                    'import "@tarojs/components/global.css"',
                    'import { initPxTransform } from "@tarojs/taro"',
                    `import { ${routerCreator}, ${historyCreator}, ${appMountHandler} } from "@tarojs/router"`,
                    `import component from "${(0, helper_1.normalizePath)(app.scriptPath)}"`,
                    'import { window } from "@tarojs/runtime"',
                    `import { ${creator} } from "${creatorLocation}"`,
                    importFrameworkStatement,
                    extraImportForWeb,
                    setReconcilerPost,
                    `var config = window.__taroAppConfig = ${JSON.stringify(appConfig)}`,
                    tabBarCode,
                    routesConfig,
                    execBeforeCreateWebApp || '',
                    `var inst = ${creator}(component, ${frameworkArgs})`,
                    `var history = ${historyCreator}({ window })`,
                    `${appMountHandler}(config, history)`,
                    `${routerCreator}(history, inst, config, ${importFrameworkName})`,
                    'initPxTransform({',
                    `  designWidth: ${pxTransformConfig.designWidth},`,
                    `  deviceRatio: ${JSON.stringify(pxTransformConfig.deviceRatio)},`,
                    `  baseFontSize: ${pxTransformConfig.baseFontSize || (pxTransformConfig.minRootSize >= 1 ? pxTransformConfig.minRootSize : 20)},`,
                    `  unitPrecision: ${pxTransformConfig.unitPrecision},`,
                    `  targetUnit: ${JSON.stringify(pxTransformConfig.targetUnit)}`,
                    '})',
                ].join('\n');
            }
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=entry.js.map