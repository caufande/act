"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const shared_1 = require("@tarojs/shared");
const utils_1 = require("../utils");
const component_1 = require("../utils/component");
const constants_1 = require("../utils/constants");
function default_1(viteCompilerContext) {
    return [{
            name: 'taro:vite-mini-emit',
            generateBundle(_outputOpts, bundle) {
                return __awaiter(this, void 0, void 0, function* () {
                    const isUsingCustomWrapper = component_1.componentConfig.thirdPartyComponents.has('custom-wrapper');
                    if (viteCompilerContext) {
                        const { taroConfig, sourceDir } = viteCompilerContext;
                        const template = taroConfig.template;
                        if ((0, shared_1.isFunction)(viteCompilerContext.taroConfig.modifyMiniConfigs)) {
                            viteCompilerContext.taroConfig.modifyMiniConfigs(viteCompilerContext.filesConfig);
                        }
                        const compPathId = yield this.resolve(taroConfig.taroComponentsPath);
                        if (compPathId) {
                            const id = compPathId.id;
                            const depsChunks = ['vendors.js', 'common.js'];
                            let isFound = false;
                            // eslint-disable-next-line no-inner-declarations
                            function collectDeps(chunkName) {
                                const chunk = bundle[chunkName];
                                if ((chunk === null || chunk === void 0 ? void 0 : chunk.type) === 'chunk' && chunk.moduleIds.includes(id)) {
                                    const module = chunk.modules[id];
                                    module.renderedExports.forEach(item => component_1.componentConfig.includes.add((0, shared_1.toDashed)(item)));
                                    isFound = true;
                                    return true;
                                }
                            }
                            depsChunks.some(chunkName => {
                                return collectDeps(chunkName);
                            });
                            if (!isFound) {
                                for (const chunkName in bundle) {
                                    if (collectDeps(chunkName)) {
                                        break;
                                    }
                                }
                            }
                        }
                        // emit: app.json
                        generateConfigFile(this, viteCompilerContext, {
                            filePath: viteCompilerContext.app.name,
                            config: viteCompilerContext.app.config
                        });
                        // emit: page
                        viteCompilerContext.pages.forEach(page => {
                            const pageConfig = page.config;
                            if (!page.isNative) {
                                const usingComponents = pageConfig.usingComponents = Object.assign({}, pageConfig.usingComponents);
                                if (isUsingCustomWrapper) {
                                    const importCustomWrapperPath = (0, helper_1.promoteRelativePath)(node_path_1.default.relative(page.scriptPath, node_path_1.default.join(sourceDir, viteCompilerContext.getTargetFilePath(constants_1.customWrapperName, ''))));
                                    usingComponents[constants_1.customWrapperName] = importCustomWrapperPath;
                                }
                                if (!template.isSupportRecursive) {
                                    const importBaseCompPath = (0, helper_1.promoteRelativePath)(node_path_1.default.relative(page.scriptPath, node_path_1.default.join(sourceDir, viteCompilerContext.getTargetFilePath(constants_1.baseCompName, ''))));
                                    usingComponents[constants_1.baseCompName] = importBaseCompPath;
                                }
                                const importBaseTemplatePath = (0, helper_1.promoteRelativePath)(node_path_1.default.relative(page.scriptPath, node_path_1.default.join(sourceDir, viteCompilerContext.getTemplatePath(constants_1.baseTemplateName))));
                                generateTemplateFile(this, viteCompilerContext, {
                                    filePath: page.scriptPath,
                                    content: template.buildPageTemplate(importBaseTemplatePath)
                                });
                            }
                            generateConfigFile(this, viteCompilerContext, {
                                filePath: page.name,
                                config: pageConfig
                            });
                        });
                        // emit native components' json
                        for (const comp of viteCompilerContext.nativeComponents.values()) {
                            if (comp.isPackage)
                                continue;
                            generateConfigFile(this, viteCompilerContext, {
                                filePath: comp.name,
                                config: comp.config
                            });
                        }
                        // emit: base.xml
                        generateTemplateFile(this, viteCompilerContext, {
                            filePath: constants_1.baseTemplateName,
                            content: template.buildTemplate(component_1.componentConfig)
                        });
                        if (template.isUseXS) {
                            // emit: utils.xs
                            generateXSFile(this, viteCompilerContext, {
                                filePath: 'utils',
                                content: viteCompilerContext.taroConfig.template.buildXScript()
                            });
                        }
                        // emit: comp.json, comp.xml
                        if (!template.isSupportRecursive) {
                            // 如微信、QQ 不支持递归模版的小程序，需要使用自定义组件协助递归
                            const baseCompConfig = {
                                component: true,
                                usingComponents: {
                                    [constants_1.baseCompName]: `./${constants_1.baseCompName}`
                                }
                            };
                            if (isUsingCustomWrapper) {
                                baseCompConfig.usingComponents[constants_1.customWrapperName] = `./${constants_1.customWrapperName}`;
                            }
                            generateConfigFile(this, viteCompilerContext, {
                                filePath: constants_1.baseCompName,
                                config: baseCompConfig
                            });
                            generateTemplateFile(this, viteCompilerContext, {
                                filePath: constants_1.baseCompName,
                                content: template.buildBaseComponentTemplate(viteCompilerContext.fileType.templ)
                            });
                        }
                        // emit: custom-wrapper.json, custom-wrapper.xml
                        if (isUsingCustomWrapper) {
                            const customWrapperConfig = {
                                filePath: constants_1.customWrapperName,
                                config: {
                                    component: true,
                                    usingComponents: {
                                        [constants_1.customWrapperName]: `./${constants_1.customWrapperName}`
                                    }
                                }
                            };
                            if (!template.isSupportRecursive) {
                                customWrapperConfig.config.usingComponents[constants_1.baseCompName] = `./${constants_1.baseCompName}`;
                            }
                            generateConfigFile(this, viteCompilerContext, {
                                filePath: constants_1.customWrapperName,
                                config: {
                                    component: true,
                                    usingComponents: {
                                        [constants_1.customWrapperName]: `./${constants_1.customWrapperName}`
                                    }
                                }
                            });
                            generateTemplateFile(this, viteCompilerContext, {
                                filePath: constants_1.customWrapperName,
                                content: template.buildCustomComponentTemplate(viteCompilerContext.fileType.templ)
                            });
                        }
                        else {
                            delete bundle[viteCompilerContext.getScriptPath(constants_1.customWrapperName)];
                        }
                    }
                });
            }
        }, {
            name: 'taro:vite-mini-emit-post',
            generateBundle(_outputOpts, bundle) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (viteCompilerContext) {
                        const { taroConfig } = viteCompilerContext;
                        if ((0, shared_1.isFunction)(taroConfig.modifyBuildAssets)) {
                            const assets = {};
                            for (const name in bundle) {
                                const chunk = bundle[name];
                                const source = chunk.type === 'asset' ? chunk.source : chunk.code;
                                assets[chunk.fileName] = {
                                    source: () => source
                                };
                            }
                            const assetsProxy = new Proxy(assets, {
                                set(target, p, newValue) {
                                    if (!(0, shared_1.isString)(p))
                                        return false;
                                    target[p] = newValue;
                                    const chunk = bundle[p];
                                    if (chunk.type === 'asset') {
                                        chunk.source = newValue.source();
                                    }
                                    else {
                                        chunk.code = newValue.source();
                                    }
                                    return true;
                                },
                            });
                            taroConfig.modifyBuildAssets(assetsProxy, {
                                pages: viteCompilerContext.pages,
                                filesConfig: viteCompilerContext.filesConfig,
                                getConfigFilePath: viteCompilerContext.getConfigFilePath,
                                options: {
                                    isBuildPlugin: viteCompilerContext.taroConfig.isBuildPlugin
                                }
                            });
                        }
                    }
                });
            }
        }];
}
exports.default = default_1;
function generateConfigFile(ctx, viteCompilerContext, options) {
    const { filePath, config } = options;
    const fileName = viteCompilerContext.getConfigPath((0, utils_1.getComponentName)(viteCompilerContext, filePath));
    const unOfficialConfigs = ['enableShareAppMessage', 'enableShareTimeline', 'components'];
    unOfficialConfigs.forEach(item => {
        delete config[item];
    });
    const source = (0, utils_1.prettyPrintJson)(config);
    ctx.emitFile({
        type: 'asset',
        fileName,
        source
    });
}
function generateTemplateFile(ctx, viteCompilerContext, options) {
    var _a;
    let source = options.content;
    const fileName = viteCompilerContext.getTemplatePath((0, utils_1.getComponentName)(viteCompilerContext, options.filePath));
    if ((_a = viteCompilerContext.taroConfig.minifyXML) === null || _a === void 0 ? void 0 : _a.collapseWhitespace) {
        const minify = require('html-minifier').minify;
        source = minify(source, {
            collapseWhitespace: true,
            keepClosingSlash: true
        });
    }
    ctx.emitFile({
        type: 'asset',
        fileName,
        source
    });
}
function generateXSFile(ctx, viteCompilerContext, options) {
    const ext = viteCompilerContext.fileType.xs;
    if (ext == null)
        return;
    const fileName = viteCompilerContext.getTargetFilePath(options.filePath, ext);
    ctx.emitFile({
        type: 'asset',
        fileName,
        source: options.content
    });
}
//# sourceMappingURL=emit.js.map