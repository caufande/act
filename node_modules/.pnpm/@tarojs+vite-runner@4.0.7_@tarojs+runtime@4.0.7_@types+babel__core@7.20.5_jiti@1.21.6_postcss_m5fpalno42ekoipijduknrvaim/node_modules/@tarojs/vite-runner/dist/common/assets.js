"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helper_1 = require("@tarojs/helper");
const shared_1 = require("@tarojs/shared");
const mrmime_1 = __importDefault(require("mrmime"));
const utils_1 = require("../utils");
const rawRE = /(?:\?|&)raw(?:&|$)/;
const urlRE = /(\?|&)url(?:&|$)/;
const queryRE = /\?.*$/s;
const hashRE = /#.*$/s;
const cleanUrl = (url) => url.replace(hashRE, '').replace(queryRE, '');
function default_1(viteCompilerContext) {
    const { taroConfig, sourceDir } = viteCompilerContext;
    let resolvedConfig;
    const assetsCache = new WeakMap();
    return {
        name: 'taro:vite-assets',
        enforce: 'pre',
        configResolved(config) {
            resolvedConfig = config;
        },
        buildStart() {
            assetsCache.set(resolvedConfig, new Map());
        },
        load(id) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a;
                if ((0, utils_1.isVirtualModule)(id))
                    return;
                if (rawRE.test(id) || urlRE.test(id))
                    return;
                id = cleanUrl(id);
                if (!resolvedConfig.assetsInclude(id))
                    return;
                const cache = assetsCache.get(resolvedConfig);
                const cachedValue = cache === null || cache === void 0 ? void 0 : cache.get(id);
                if ((0, shared_1.isString)(cachedValue)) {
                    return cachedValue;
                }
                const source = yield helper_1.fs.readFile(id);
                const { imageUrlLoaderOption = {}, fontUrlLoaderOption = {}, mediaUrlLoaderOption = {} } = taroConfig;
                let limit;
                let options = {};
                if (helper_1.REG_IMAGE.test(id)) {
                    options = imageUrlLoaderOption;
                    limit = options.limit;
                }
                else if (helper_1.REG_FONT.test(id)) {
                    options = fontUrlLoaderOption;
                    limit = options.limit;
                }
                else if (helper_1.REG_MEDIA.test(id)) {
                    options = mediaUrlLoaderOption;
                    limit = options.limit;
                }
                else {
                    return;
                }
                const isEsModule = (0, shared_1.isBoolean)(options.esModule) ? options.esModule : true;
                let url;
                if (limit || (!(0, shared_1.isBoolean)(limit) && source.length < limit)) {
                    const mimeType = (_a = mrmime_1.default.lookup(id)) !== null && _a !== void 0 ? _a : 'application/octet-stream';
                    url = `data:${mimeType};base64,${source.toString('base64')}`;
                }
                else {
                    let fileName = id.replace(sourceDir + '/', '');
                    (0, shared_1.isFunction)(options.name) && (fileName = options.name(id));
                    const referenceId = this.emitFile({
                        type: 'asset',
                        fileName,
                        source
                    });
                    url = `__VITE_ASSET__${referenceId}__`;
                }
                cache === null || cache === void 0 ? void 0 : cache.set(id, url);
                return isEsModule
                    ? `export default "${url}"`
                    : `module.exports = "${url}"`;
            });
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=assets.js.map