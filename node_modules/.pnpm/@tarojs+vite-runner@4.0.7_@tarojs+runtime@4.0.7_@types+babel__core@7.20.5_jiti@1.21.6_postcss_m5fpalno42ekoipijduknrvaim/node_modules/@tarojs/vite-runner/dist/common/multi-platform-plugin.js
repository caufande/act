"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const utils_1 = require("../utils");
function isViteDepsPath(filePath) {
    const normalizedPath = node_path_1.default.normalize(filePath);
    // 判断路径是否包含 node_modules/.vite/deps
    const isViteDeps = normalizedPath.includes(node_path_1.default.join('node_modules', '.vite', 'deps'));
    return isViteDeps;
}
function default_1(complier) {
    const { taroConfig } = complier;
    return {
        name: 'taro:vite-multi-platform-plugin',
        enforce: 'pre',
        resolveId(source, importer, options) {
            return __awaiter(this, void 0, void 0, function* () {
                if ((0, utils_1.isVirtualModule)(source))
                    return null;
                if (helper_1.REG_NODE_MODULES.test(source))
                    return null;
                // example: 'js|jsx|ts|tsx|vue'
                const allowedExts = Array.from(new Set(helper_1.SCRIPT_EXT.concat(taroConfig.frameworkExts || [])))
                    .map((item) => item.replace(/^\./, ''))
                    .join('|');
                // example: /\.(weapp|mini)\.(js|jsx|ts|tsx|vue)/
                const multiPlatformReg = new RegExp(`\\.(${process.env.TARO_ENV}|${process.env.TARO_PLATFORM})\\.(${allowedExts})`);
                if (multiPlatformReg.test(source))
                    return null;
                if (!importer)
                    return null;
                const ext = node_path_1.default.extname(source);
                const dir = node_path_1.default.dirname(source);
                const basename = node_path_1.default.basename(source, ext);
                // Note: H5 端的 dev 模式下，会存在 esbuild 预编译，会把 预编译的 chunk 文件放到 node_modules/.vite/deps 「cacheDir」 目录下，
                // 当时 vite 的源码里面有个钩子，会对改目录下的 resolveId 进行拦截处理，vitejs/vite/packages/vite/src/node/plugins/optimizedDeps.ts，会直接返回传入的 id，所以不会返回 null
                // 最全面的做法是，通过 config 钩子拿到 cacheDir，然后判断是否是 cacheDir 下的文件，如果是，则返回 null
                // 目前先简单处理一下，如果是 node_modules/.vite/deps 目录下 先返回 null
                const rawResolvedPath = node_path_1.default.resolve(node_path_1.default.dirname(importer), `${node_path_1.default.join(dir, basename)}${ext}`);
                if (isViteDepsPath(rawResolvedPath))
                    return null;
                let resolution = yield this.resolve(node_path_1.default.resolve(node_path_1.default.dirname(importer), `${node_path_1.default.join(dir, basename)}.${process.env.TARO_ENV}${ext}`), importer, Object.assign(Object.assign({}, options), { skipSelf: true }));
                if (!resolution) {
                    resolution = yield this.resolve(node_path_1.default.resolve(node_path_1.default.dirname(importer), `${node_path_1.default.join(dir, basename)}.${process.env.TARO_PLATFORM}${ext}`), importer, Object.assign(Object.assign({}, options), { skipSelf: true }));
                }
                if (!resolution) {
                    resolution = yield this.resolve(source, importer, Object.assign(Object.assign({}, options), { skipSelf: true }));
                }
                if (!(resolution === null || resolution === void 0 ? void 0 : resolution.id) || resolution.external)
                    return resolution;
                if ((0, utils_1.isVirtualModule)(resolution.id))
                    return resolution;
                if (helper_1.REG_NODE_MODULES.test(resolution.id))
                    return resolution;
                if (multiPlatformReg.test(resolution.id))
                    return resolution;
            });
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=multi-platform-plugin.js.map