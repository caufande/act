"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("@tarojs/shared");
function default_1({ include = [], comparisonId, force = false } = {}) {
    let firstGenerate = true;
    const files = new Set();
    return {
        name: 'taro:rollup-watch-increment',
        watchChange(id, { event }) {
            if ((0, shared_1.isFunction)(force) && force(id) === true) {
                firstGenerate = true;
            }
            else if (firstGenerate) {
                firstGenerate = false;
            }
            if (['create', 'update'].includes(event)) {
                files.add(id);
            }
        },
        generateBundle(_outputOpts, bundle) {
            if (firstGenerate || !this.meta.watchMode || force === true)
                return;
            const chunks = Object.values(bundle);
            for (const chunk of chunks) {
                if (files.has(chunk.fileName))
                    continue;
                if (include.some(f => {
                    if (typeof f === 'string')
                        return chunk.fileName === f;
                    else
                        return f.test(chunk.fileName);
                })) {
                    files.add(chunk.fileName);
                }
                else if (chunk.type === 'chunk') {
                    const moduleIds = Object.keys(chunk.modules);
                    if (moduleIds.some(id => files.has(id) || ((0, shared_1.isFunction)(comparisonId) && comparisonId(id, files)))) {
                        files.add(chunk.fileName);
                        files.add(`${chunk.fileName}.map`);
                    }
                }
            }
            chunks.forEach(chunk => {
                if (!files.has(chunk.fileName)) {
                    delete bundle[chunk.fileName];
                }
            });
            files.clear();
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=rollup-increment-plugin.js.map