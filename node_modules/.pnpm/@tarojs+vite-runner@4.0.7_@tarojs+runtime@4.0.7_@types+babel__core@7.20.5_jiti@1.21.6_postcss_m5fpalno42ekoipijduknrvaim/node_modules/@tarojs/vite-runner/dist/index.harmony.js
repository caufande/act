"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("@tarojs/shared");
const vite_1 = require("vite");
const harmony_1 = __importDefault(require("./harmony"));
const utils_1 = require("./utils");
const harmony_2 = require("./utils/compiler/harmony");
const component_1 = require("./utils/component");
function default_1(appPath, rawTaroConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e;
        const viteCompilerContext = new harmony_2.TaroCompilerContext(appPath, rawTaroConfig);
        const { taroConfig } = viteCompilerContext;
        const plugins = [
            (0, harmony_1.default)(viteCompilerContext)
        ];
        // copy-plugin
        if ((_b = (_a = taroConfig.copy) === null || _a === void 0 ? void 0 : _a.patterns) === null || _b === void 0 ? void 0 : _b.length) {
            plugins.push(require('vite-plugin-static-copy').viteStaticCopy({
                targets: (0, utils_1.convertCopyOptions)(taroConfig)
            }));
        }
        // custom vite plugins
        if (!(0, shared_1.isString)(taroConfig.compiler) && ((_d = (_c = taroConfig.compiler) === null || _c === void 0 ? void 0 : _c.vitePlugins) === null || _d === void 0 ? void 0 : _d.length)) {
            plugins.push(...taroConfig.compiler.vitePlugins);
        }
        const commonConfig = {
            plugins,
        };
        (_e = taroConfig.modifyViteConfig) === null || _e === void 0 ? void 0 : _e.call(taroConfig, commonConfig, {
            componentConfig: component_1.componentConfig
        });
        yield (0, vite_1.build)(commonConfig);
    });
}
exports.default = default_1;
//# sourceMappingURL=index.harmony.js.map