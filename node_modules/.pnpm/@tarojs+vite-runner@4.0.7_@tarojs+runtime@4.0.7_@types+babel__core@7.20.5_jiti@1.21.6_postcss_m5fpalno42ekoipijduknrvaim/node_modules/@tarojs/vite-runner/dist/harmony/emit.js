"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_child_process_1 = require("node:child_process");
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const shared_1 = require("@tarojs/shared");
const utils_1 = require("../utils");
const component_1 = require("../utils/component");
function default_1(viteCompilerContext) {
    const { taroConfig } = viteCompilerContext;
    return [{
            name: 'taro:vite-harmony-emit',
            generateBundle(_outputOpts, bundle) {
                return __awaiter(this, void 0, void 0, function* () {
                    const compPathId = yield this.resolve(taroConfig.taroComponentsPath);
                    if (compPathId) {
                        const id = compPathId.id;
                        const depsChunks = ['vendors.js', 'common.js'];
                        let isFound = false;
                        // eslint-disable-next-line no-inner-declarations
                        function collectDeps(chunkName) {
                            const chunk = bundle[chunkName];
                            if ((chunk === null || chunk === void 0 ? void 0 : chunk.type) === 'chunk' && chunk.moduleIds.includes(id)) {
                                const module = chunk.modules[id];
                                module.renderedExports.forEach(item => component_1.componentConfig.includes.add((0, shared_1.toDashed)(item)));
                                isFound = true;
                                return true;
                            }
                        }
                        depsChunks.some(collectDeps);
                        if (!isFound) {
                            for (const chunkName in bundle) {
                                if (collectDeps(chunkName))
                                    break;
                            }
                        }
                    }
                    // Note: 组件编译模式不修改 Harmony 配置
                    if (!taroConfig.isBuildNativeComp) {
                        // Note: 修改 harmony Hap 的配置文件，注入路由配置
                        viteCompilerContext.modifyHarmonyConfig(viteCompilerContext.app.config);
                    }
                });
            }
        }, {
            name: 'taro:vite-harmony-emit-post',
            enforce: 'post',
            generateBundle(_outputOpts, bundle) {
                return __awaiter(this, void 0, void 0, function* () {
                    for (const fileName in bundle) {
                        if (fileName.endsWith('.css')) {
                            delete bundle[fileName];
                        }
                    }
                    if ((0, shared_1.isFunction)(taroConfig.modifyBuildAssets)) {
                        const assets = {};
                        for (const name in bundle) {
                            const chunk = bundle[name];
                            const source = chunk.type === 'asset' ? chunk.source : chunk.code;
                            assets[chunk.fileName] = {
                                source: () => source
                            };
                        }
                        const assetsProxy = new Proxy(assets, {
                            set(target, p, newValue) {
                                if (!(0, shared_1.isString)(p))
                                    return false;
                                target[p] = newValue;
                                const chunk = bundle[p];
                                if (chunk.type === 'asset') {
                                    chunk.source = newValue.source();
                                }
                                else {
                                    chunk.code = newValue.source();
                                }
                                return true;
                            },
                        });
                        taroConfig.modifyBuildAssets(assetsProxy, {
                            pages: viteCompilerContext.pages,
                            filesConfig: viteCompilerContext.filesConfig,
                            getConfigFilePath: viteCompilerContext.getConfigFilePath,
                            options: {}
                        });
                    }
                    // TODO 收集运行时使用 Harmony 依赖
                    const deps = {
                    // Note: 目前开发者工具版本支持以下依赖
                    // '@hmscore/hms-js-base': '^6.1.0-300',
                    // '@hmscore/hms-jsb-account': '^1.0.300'
                    };
                    const pkg = viteCompilerContext.modifyHostPackage(deps);
                    const { projectPath, hapName = 'entry', ohpm } = taroConfig;
                    const outputRoot = node_path_1.default.join(projectPath, hapName);
                    if (taroConfig.isBuildNativeComp && typeof (pkg === null || pkg === void 0 ? void 0 : pkg.main) === 'string' && pkg.main) {
                        const mainFile = node_path_1.default.join(outputRoot, pkg.main);
                        // @ts-ignore
                        const comps = viteCompilerContext.getComponents() || [];
                        const lines = [];
                        comps.forEach((comp) => {
                            var _a, _b;
                            const key = Object.keys(((_a = taroConfig.router) === null || _a === void 0 ? void 0 : _a.customRoutes) || {}).find(e => {
                                const name = comp.originName || comp.name;
                                return [name, (0, utils_1.addLeadingSlash)(name)].includes(e);
                            });
                            if (key) {
                                const alias = (_b = taroConfig.router) === null || _b === void 0 ? void 0 : _b.customRoutes[key];
                                if (alias instanceof Array) {
                                    alias.forEach(item => lines.push(`export * from './${node_path_1.default.posix.join('src/main', 'ets', item)}'`));
                                }
                                else if (typeof alias === 'string') {
                                    lines.push(`export * from './${node_path_1.default.posix.join('src/main', 'ets', alias)}'`);
                                }
                            }
                            else {
                                lines.push(`export * from './${node_path_1.default.posix.join('src/main', 'ets', comp.name)}'`);
                            }
                        });
                        lines.push('');
                        helper_1.fs.writeFileSync(mainFile, lines.join('\n'));
                    }
                    let ohpmPath = ohpm;
                    let localOhpmPath = '';
                    try {
                        if (!ohpm) {
                            localOhpmPath = (0, node_child_process_1.execSync)(`${(process === null || process === void 0 ? void 0 : process.platform) === 'win32' ? 'where' : 'which'} ohpm`).toString().replace(/\n/, '');
                        }
                    }
                    catch (_) {
                        localOhpmPath = '';
                    }
                    ohpmPath = ohpm || localOhpmPath || '~/Library/Huawei/ohpm/bin/ohpm';
                    try {
                        console.log(`\n\n开始 ${helper_1.chalk.yellow('ohpm install')} 脚本执行...\n`); // eslint-disable-line no-console
                        (0, node_child_process_1.execSync)(`${ohpmPath} install`, { cwd: outputRoot, stdio: 'inherit' });
                        console.log(`执行 ${helper_1.chalk.yellow('ohpm install')} 脚本成功。\n`); // eslint-disable-line no-console
                    }
                    catch (e) {
                        console.error(`自动安装依赖失败，请手动执行 ${helper_1.chalk.yellow('ohpm install')} 或在 DevEco Studio 中打开 oh-package.json5 并点击 ${helper_1.chalk.yellow('Sync Now')} 按钮`);
                    }
                });
            }
        }];
}
exports.default = default_1;
//# sourceMappingURL=emit.js.map