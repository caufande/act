"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@babel/core");
const helper_1 = require("@tarojs/helper");
exports.default = (viteCompilerContext) => {
    return [{
            name: '',
            enforce: 'pre',
            transform(code, id) {
                if (/(\.(et|j|t)sx?|\.vue)$/.test(id.split('?')[0])) {
                    const result = (0, core_1.transformSync)(code, {
                        filename: id,
                        plugins: [
                            [
                                function renameImportPlugin(babel) {
                                    const t = babel.types;
                                    return {
                                        name: 'taro-rename-import-plugin',
                                        visitor: {
                                            ImportDeclaration(ast) {
                                                if (ast.node.source.value !== '@tarojs/components')
                                                    return;
                                                const newSpecifiers = ast.node.specifiers.map(node => {
                                                    if (t.isImportSpecifier(node)) {
                                                        const { imported, local } = node;
                                                        const property = t.isIdentifier(imported) ? imported.name : imported.value;
                                                        return t.importSpecifier(local, t.identifier(`Taro${property}TagName`));
                                                    }
                                                    return node;
                                                });
                                                ast.node.source.value = '@tarojs/components/tag';
                                                ast.node.specifiers = newSpecifiers;
                                            },
                                            ExportNamedDeclaration(ast) {
                                                const { node } = ast;
                                                if (node.source && node.source.value === '@tarojs/components') {
                                                    const newSpecifiers = node.specifiers.map(specifier => {
                                                        if (t.isExportSpecifier(specifier)) {
                                                            const exportedName = specifier.exported.name;
                                                            return t.exportSpecifier(t.identifier(`Taro${exportedName}TagName`), specifier.exported);
                                                        }
                                                        return specifier;
                                                    });
                                                    node.source.value = '@tarojs/components/tag';
                                                    node.specifiers = newSpecifiers;
                                                }
                                            }
                                        },
                                    };
                                }
                            ],
                        ],
                    });
                    return {
                        code: (result === null || result === void 0 ? void 0 : result.code) || code,
                        map: (result === null || result === void 0 ? void 0 : result.map) || null,
                    };
                }
                return null;
            }
        }, {
            name: 'taro:vite-import-api',
            enforce: 'post',
            transform(code, id) {
                return __awaiter(this, void 0, void 0, function* () {
                    const exts = Array.from(new Set(viteCompilerContext.frameworkExts.concat(helper_1.SCRIPT_EXT)));
                    if (id.startsWith(viteCompilerContext.sourceDir) && exts.some((ext) => id.includes(ext))) {
                        // TODO 后续考虑使用 SWC 插件的方式实现
                        const result = yield (0, core_1.transformAsync)(code, {
                            filename: id,
                            plugins: [
                                [
                                    require('babel-plugin-transform-taroapi'),
                                    {
                                        packageName: '@tarojs/taro',
                                    },
                                ],
                            ],
                        });
                        return {
                            code: (result === null || result === void 0 ? void 0 : result.code) || code,
                            map: (result === null || result === void 0 ? void 0 : result.map) || null,
                        };
                    }
                });
            },
        }];
};
//# sourceMappingURL=babel.js.map