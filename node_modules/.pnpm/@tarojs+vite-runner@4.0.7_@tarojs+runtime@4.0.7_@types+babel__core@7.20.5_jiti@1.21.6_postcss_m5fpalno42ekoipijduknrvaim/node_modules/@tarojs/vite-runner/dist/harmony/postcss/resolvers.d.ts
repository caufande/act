import { type Alias, type ResolvedConfig, type ResolveFn } from 'vite';
import { PostCssDialectLang, PreprocessLang } from './constants';
import type Less from 'less';
import type PostCSS from 'postcss';
import type { ExistingRawSourceMap, RollupError } from 'rollup';
import type Sass from 'sass';
import type Stylus from 'stylus';
interface CSSAtImportResolvers {
    css: ResolveFn;
    sass: ResolveFn;
    less: ResolveFn;
}
export declare const configToAtImportResolvers: WeakMap<Readonly<Omit<import("vite").UserConfig, "plugins" | "css" | "assetsInclude" | "optimizeDeps" | "worker" | "build"> & {
    configFile: string | undefined;
    configFileDependencies: string[];
    inlineConfig: import("vite").InlineConfig;
    root: string;
    base: string;
    publicDir: string;
    cacheDir: string;
    command: "build" | "serve";
    mode: string;
    isWorker: boolean;
    isProduction: boolean;
    envDir: string;
    env: Record<string, any>;
    resolve: Required<import("vite").ResolveOptions> & {
        alias: Alias[];
    };
    plugins: readonly import("vite").Plugin[];
    css: import("vite").ResolvedCSSOptions | undefined;
    esbuild: false | import("vite").ESBuildOptions;
    server: import("vite").ResolvedServerOptions;
    build: import("vite").ResolvedBuildOptions;
    preview: import("vite").ResolvedPreviewOptions;
    ssr: import("vite").ResolvedSSROptions;
    assetsInclude: (file: string) => boolean;
    logger: import("vite").Logger;
    createResolver: (options?: Partial<import("vite").InternalResolveOptions> | undefined) => ResolveFn;
    optimizeDeps: import("vite").DepOptimizationOptions;
    worker: import("vite").ResolveWorkerOptions;
    appType: import("vite").AppType;
    experimental: import("vite").ExperimentalOptions;
} & import("vite").PluginHookUtils>, CSSAtImportResolvers>;
export declare function createCSSResolvers(config: ResolvedConfig): CSSAtImportResolvers;
export declare function getCssResolversKeys(resolvers: CSSAtImportResolvers): Array<keyof CSSAtImportResolvers>;
type PreprocessorAdditionalDataResult = string | {
    content: string;
    map?: ExistingRawSourceMap;
};
type PreprocessorAdditionalData = string | ((source: string, filename: string) => PreprocessorAdditionalDataResult | Promise<PreprocessorAdditionalDataResult>);
type StylePreprocessorOptions = {
    [key: string]: any;
    additionalData?: PreprocessorAdditionalData;
    filename: string;
    alias: Alias[];
    enableSourcemap: boolean;
};
type SassStylePreprocessorOptions = StylePreprocessorOptions & Sass.Options;
type StylusStylePreprocessorOptions = StylePreprocessorOptions & {
    define?: Record<string, any>;
};
type StylePreprocessor = (source: string, root: string, options: StylePreprocessorOptions, resolvers: CSSAtImportResolvers) => StylePreprocessorResults | Promise<StylePreprocessorResults>;
type SassStylePreprocessor = (source: string, root: string, options: SassStylePreprocessorOptions, resolvers: CSSAtImportResolvers) => StylePreprocessorResults | Promise<StylePreprocessorResults>;
type StylusStylePreprocessor = (source: string, root: string, options: StylusStylePreprocessorOptions, resolvers: CSSAtImportResolvers) => StylePreprocessorResults | Promise<StylePreprocessorResults>;
interface StylePreprocessorResults {
    code: string;
    map?: ExistingRawSourceMap | undefined;
    additionalMap?: ExistingRawSourceMap | undefined;
    error?: RollupError;
    deps: string[];
}
export declare function loadPreprocessor(lang: PreprocessLang.scss, root: string): typeof Sass;
export declare function loadPreprocessor(lang: PreprocessLang.sass, root: string): typeof Sass;
export declare function loadPreprocessor(lang: PreprocessLang.less, root: string): typeof Less;
export declare function loadPreprocessor(lang: PreprocessLang.stylus, root: string): typeof Stylus;
export declare function loadPreprocessor(lang: PostCssDialectLang.sss, root: string): PostCSS.Parser;
export declare const scss: SassStylePreprocessor;
export declare const sass: SassStylePreprocessor;
export declare const less: StylePreprocessor;
export declare const styl: StylusStylePreprocessor;
export {};
