"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TARO_TABBAR_PAGE_PATH = exports.PAGE_SUFFIX = void 0;
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const utils_1 = require("../utils");
const template_1 = require("./template");
exports.PAGE_SUFFIX = '?page-loader=true';
exports.TARO_TABBAR_PAGE_PATH = 'taro_tabbar';
function default_1(viteCompilerContext) {
    const name = 'taro:vite-harmony-page';
    return {
        name,
        enforce: 'pre',
        resolveId(source, importer, options) {
            var _a;
            if (((viteCompilerContext === null || viteCompilerContext === void 0 ? void 0 : viteCompilerContext.isPage(source)) || (viteCompilerContext === null || viteCompilerContext === void 0 ? void 0 : viteCompilerContext.isComponent(source))) && options.isEntry) {
                if ((_a = viteCompilerContext.getPageById(source)) === null || _a === void 0 ? void 0 : _a.isNative)
                    return null;
                return (0, utils_1.appendVirtualModulePrefix)(source + exports.PAGE_SUFFIX);
            }
            else if (source.includes(exports.TARO_TABBAR_PAGE_PATH) && options.isEntry) {
                return (0, utils_1.appendVirtualModulePrefix)(source);
            }
            else if (source.endsWith(exports.PAGE_SUFFIX)) {
                return (0, utils_1.appendVirtualModulePrefix)(source);
            }
            else if (utils_1.virtualModulePrefixREG.test(importer || '')) {
                importer = (0, utils_1.stripVirtualModulePrefix)(importer || '');
                if (source.includes(exports.TARO_TABBAR_PAGE_PATH) && source === importer.replace(exports.PAGE_SUFFIX, '')) {
                    return (0, utils_1.appendVirtualModulePrefix)(source);
                }
                else {
                    return this.resolve(source, importer, options);
                }
            }
            return null;
        },
        load(id) {
            var _a, _b, _c;
            if (!viteCompilerContext)
                return;
            const { taroConfig, cwd: appPath, app, loaderMeta } = viteCompilerContext;
            const appConfig = app.config;
            const { sourceRoot = 'src' } = taroConfig;
            const appRoot = node_path_1.default.resolve(appPath, sourceRoot);
            const parse = new template_1.PageParser(appPath, appConfig, taroConfig, loaderMeta, taroConfig.isPure);
            const tabbarList = ((_a = appConfig.tabBar) === null || _a === void 0 ? void 0 : _a.list) || [];
            const rawId = (0, utils_1.stripVirtualModulePrefix)(id).replace(exports.PAGE_SUFFIX, '');
            if (id.endsWith(exports.PAGE_SUFFIX)) {
                const page = viteCompilerContext.getPageById(rawId) || viteCompilerContext.getComponentById(rawId);
                // Note: 组件编译模式下禁用 TabBar 页面生成
                const isTabbarPage = !taroConfig.isBuildNativeComp &&
                    tabbarList.some(item => item.pagePath === (page === null || page === void 0 ? void 0 : page.name));
                if (!page) {
                    viteCompilerContext.logger.warn(`编译页面 ${rawId} 失败!`);
                    process.exit(1);
                }
                if (isTabbarPage) {
                    if (tabbarList[0].pagePath === page.name) {
                        const tabbarPages = tabbarList.map(item => viteCompilerContext.pages.find((e) => {
                            if (e.name === item.pagePath) {
                                e.originName = item.pagePath;
                                e.id = (0, utils_1.appendVirtualModulePrefix)(e.scriptPath + exports.PAGE_SUFFIX);
                                return true;
                            }
                        }));
                        const tabbarId = node_path_1.default.join(appRoot, `${exports.TARO_TABBAR_PAGE_PATH}`);
                        this.emitFile({
                            type: 'prebuilt-chunk',
                            fileName: viteCompilerContext.getTargetFilePath(exports.TARO_TABBAR_PAGE_PATH, '.ets'),
                            code: parse.parse(tabbarId, tabbarPages, name, this.resolve),
                            exports: ['default'],
                        });
                    }
                }
                else {
                    const list = [];
                    const key = Object.keys(((_b = taroConfig.router) === null || _b === void 0 ? void 0 : _b.customRoutes) || {}).find(e => [page.name, (0, utils_1.addLeadingSlash)(page.name)].includes(e));
                    if (key) {
                        const alias = (_c = taroConfig.router) === null || _c === void 0 ? void 0 : _c.customRoutes[key];
                        if (alias instanceof Array) {
                            list.push(...alias);
                        }
                        else {
                            list.push(alias);
                        }
                    }
                    else {
                        list.push(page.name);
                    }
                    list.forEach(pageName => {
                        pageName = (0, helper_1.removeHeadSlash)(pageName);
                        if (!pageName) {
                            pageName = 'index';
                        }
                        const page_ = page;
                        page_.id = id;
                        page_.originName = page.name;
                        page_.name = pageName;
                        this.emitFile({
                            type: 'prebuilt-chunk',
                            fileName: viteCompilerContext.getTargetFilePath(pageName, '.ets'),
                            code: parse.parse(node_path_1.default.resolve(appRoot, pageName), page_, name, this.resolve),
                            exports: ['default'],
                        });
                    });
                }
                return parse.parseEntry(rawId, page);
            }
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=page.js.map