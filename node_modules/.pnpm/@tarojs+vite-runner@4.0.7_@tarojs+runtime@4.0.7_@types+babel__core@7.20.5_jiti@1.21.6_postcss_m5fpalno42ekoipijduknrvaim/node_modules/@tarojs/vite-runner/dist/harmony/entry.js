"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TARO_COMP_SUFFIX = exports.ENTRY_SUFFIX = void 0;
const node_path_1 = __importDefault(require("node:path"));
const helper_1 = require("@tarojs/helper");
const shared_1 = require("@tarojs/shared");
const utils_1 = require("../utils");
const ets_1 = require("./ets");
const template_1 = require("./template");
exports.ENTRY_SUFFIX = '?entry-loader=true';
exports.TARO_COMP_SUFFIX = '_taro_comp';
function default_1(viteCompilerContext) {
    const name = 'taro:vite-harmony-entry';
    let isFinished = false;
    return {
        name,
        enforce: 'pre',
        resolveId(source, _importer, options) {
            // Note: 组件编译模式下不需要生成入口文件
            if (viteCompilerContext.taroConfig.isBuildNativeComp || viteCompilerContext.taroConfig.blended)
                return null;
            if ((viteCompilerContext === null || viteCompilerContext === void 0 ? void 0 : viteCompilerContext.isApp(source)) && options.isEntry) {
                return (0, utils_1.appendVirtualModulePrefix)(source + exports.ENTRY_SUFFIX);
            }
            return null;
        },
        load(id) {
            if (viteCompilerContext && id.endsWith(exports.ENTRY_SUFFIX)) {
                const rawId = (0, utils_1.stripVirtualModulePrefix)(id).replace(exports.ENTRY_SUFFIX, '');
                const { taroConfig, cwd: appPath, app } = viteCompilerContext;
                const appConfig = app.config;
                if (!isFinished) {
                    // Note: 监听 app 配置文件
                    this.addWatchFile(viteCompilerContext.getConfigFilePath(viteCompilerContext.getAppScriptPath()));
                }
                // Note: rawfile innerHTML 模版，供 innerHtml 的 webview 加载
                const { outputRoot = 'dist' } = taroConfig;
                const rawFileDir = node_path_1.default.join(node_path_1.default.resolve(outputRoot, '..'), 'resources/rawfile');
                if (!helper_1.fs.existsSync(rawFileDir)) {
                    helper_1.fs.mkdirSync(rawFileDir, { recursive: true });
                }
                const targetPath = node_path_1.default.join(rawFileDir, 'innerHTML.html');
                helper_1.fs.writeFile(targetPath, Buffer.from(`<html><body></body></html>`, 'utf-8'));
                const tabbar = appConfig.tabBar;
                const parse = new template_1.AppParser(appPath, appConfig, taroConfig, viteCompilerContext.loaderMeta);
                // emit pages
                viteCompilerContext.pages.forEach(page => {
                    if (page.isNative) {
                        const { sourceDir, nativeExt } = viteCompilerContext;
                        const nativePath = (0, helper_1.resolveMainFilePath)(node_path_1.default.join(sourceDir, page.name), nativeExt);
                        this.emitFile({
                            type: 'chunk',
                            id: nativePath + ets_1.QUERY_IS_NATIVE_SCRIPT,
                            fileName: node_path_1.default.relative(viteCompilerContext.sourceDir, nativePath) + ets_1.QUERY_IS_NATIVE_SCRIPT,
                            implicitlyLoadedAfterOneOf: [rawId]
                        });
                    }
                    else {
                        this.emitFile({
                            type: 'chunk',
                            id: page.scriptPath,
                            fileName: viteCompilerContext.getScriptPath(page.name + exports.TARO_COMP_SUFFIX),
                            implicitlyLoadedAfterOneOf: [rawId]
                        });
                    }
                });
                // native components
                for (const comp of viteCompilerContext.nativeComponents.values()) {
                    if (!comp.isPackage) {
                        this.emitFile({
                            type: 'chunk',
                            id: comp.templatePath + ets_1.QUERY_IS_NATIVE_SCRIPT,
                            fileName: node_path_1.default.relative(viteCompilerContext.sourceDir, comp.templatePath) + ets_1.QUERY_IS_NATIVE_SCRIPT,
                            implicitlyLoadedAfterOneOf: [rawId]
                        });
                    }
                }
                // emit tabbar
                if (tabbar && !(0, helper_1.isEmptyObject)(tabbar)) {
                    const list = tabbar.list || [];
                    list.forEach((item) => __awaiter(this, void 0, void 0, function* () {
                        const { iconPath, selectedIconPath } = item;
                        const { sourceDir } = viteCompilerContext;
                        if (iconPath) {
                            const filePath = node_path_1.default.resolve(sourceDir, iconPath);
                            this.emitFile({
                                type: 'asset',
                                fileName: (0, helper_1.removePathPrefix)(iconPath),
                                source: yield helper_1.fs.readFile(filePath)
                            });
                            if (!isFinished) {
                                this.addWatchFile(filePath);
                            }
                        }
                        if (selectedIconPath) {
                            const filePath = node_path_1.default.resolve(sourceDir, selectedIconPath);
                            this.emitFile({
                                type: 'asset',
                                fileName: (0, helper_1.removePathPrefix)(selectedIconPath),
                                source: yield helper_1.fs.readFile(filePath)
                            });
                            if (!isFinished) {
                                this.addWatchFile(filePath);
                            }
                        }
                    }));
                }
                // darkmode
                if (appConfig.darkmode && (0, shared_1.isString)(appConfig.themeLocation)) {
                    const themePath = node_path_1.default.resolve(viteCompilerContext.sourceDir, appConfig.themeLocation);
                    this.emitFile({
                        type: 'asset',
                        fileName: appConfig.themeLocation,
                        source: helper_1.fs.readFileSync(themePath)
                    });
                    if (!isFinished) {
                        this.addWatchFile(themePath);
                    }
                }
                this.emitFile({
                    type: 'prebuilt-chunk',
                    fileName: viteCompilerContext.getTargetFilePath(app.name, '.ets'),
                    code: parse.parse(rawId, name, this.resolve),
                    exports: ['default'],
                });
                return parse.parseEntry(rawId, appConfig);
            }
        },
        buildEnd() {
            isFinished = true;
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=entry.js.map