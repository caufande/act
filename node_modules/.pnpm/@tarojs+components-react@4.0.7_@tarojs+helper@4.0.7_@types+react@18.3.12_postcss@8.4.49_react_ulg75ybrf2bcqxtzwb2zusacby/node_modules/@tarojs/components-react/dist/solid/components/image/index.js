import { template, use, spread, insert, addEventListener, setAttribute, effect, style } from 'solid-js/web';
import { __rest } from 'tslib';
import './style/index.css.js';
import classNames from 'classnames';
import { createForwardRefComponent } from '../../utils/index.js';
import { useRef, useState, useCallback, useEffect } from '../../utils/hooks.solid.js';

var _tmpl$ = /*#__PURE__*/template(`<div>`),
  _tmpl$2 = /*#__PURE__*/template(`<img>`);
function Image(props) {
  const imgRef = useRef(null);
  const observer = useRef({});
  const [, setIsLoaded] = useState(false);
  const {
      className,
      style: style$1 = {},
      src,
      mode,
      onError,
      lazyLoad,
      imgProps,
      forwardedRef
    } = props,
    reset = __rest(props, ["className", "style", "src", "mode", "onError", "lazyLoad", "imgProps", "forwardedRef"]);
  const cls = classNames('taro-img', {
    'taro-img__widthfix': mode === 'widthFix'
  }, className);
  const imgCls = classNames('taro-img__mode-' + (mode || 'scaleToFill').toLowerCase().replace(/\s/g, ''));
  const imageOnLoad = useCallback(e => {
    const {
      onLoad
    } = props;
    Object.defineProperty(e, 'detail', {
      enumerable: true,
      writable: true,
      value: {
        width: e.target.width,
        height: e.target.height
      }
    });
    onLoad && onLoad(e);
  }, [props]);
  useEffect(() => {
    var _a, _b;
    if (lazyLoad) {
      observer.current = new IntersectionObserver(entries => {
        // 异步 api 关系
        if (entries[entries.length - 1].isIntersecting) {
          setIsLoaded(true);
          // findDOMNode(this).children[0].src = src
          imgRef.current.src = src;
        }
      }, {
        rootMargin: '300px 0px'
      });
      (_b = (_a = observer.current).observe) === null || _b === void 0 ? void 0 : _b.call(_a, imgRef.current);
    }
    return () => {
      var _a, _b;
      (_b = (_a = observer.current) === null || _a === void 0 ? void 0 : _a.disconnect) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
  }, [lazyLoad, src]);
  return (() => {
    var _el$ = _tmpl$();
    use(forwardedRef, _el$);
    _el$.className = cls;
    spread(_el$, reset, false, true);
    insert(_el$, lazyLoad ? (() => {
      var _el$2 = _tmpl$2();
      addEventListener(_el$2, "error", onError);
      addEventListener(_el$2, "load", imageOnLoad);
      use(img => imgRef.current = img, _el$2);
      _el$2.className = imgCls;
      setAttribute(_el$2, "data-src", src);
      spread(_el$2, imgProps, false, false);
      return _el$2;
    })() : (() => {
      var _el$3 = _tmpl$2();
      addEventListener(_el$3, "error", onError);
      addEventListener(_el$3, "load", imageOnLoad);
      use(img => imgRef.current = img, _el$3);
      _el$3.className = imgCls;
      setAttribute(_el$3, "src", src);
      spread(_el$3, imgProps, false, false);
      return _el$3;
    })());
    effect(_$p => style(_el$, style$1, _$p));
    return _el$;
  })();
}
var index = createForwardRefComponent(Image);

export { index as default };
//# sourceMappingURL=index.js.map
