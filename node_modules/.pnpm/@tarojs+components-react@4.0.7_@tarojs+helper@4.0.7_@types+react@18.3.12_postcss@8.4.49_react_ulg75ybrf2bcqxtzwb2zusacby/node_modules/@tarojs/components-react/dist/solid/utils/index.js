import { createComponent, mergeProps } from 'solid-js/web';
import { forwardRef } from './hooks.solid.js';

function throttle(fn) {
  let threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  let scope = arguments.length > 2 ? arguments[2] : undefined;
  let lastTime = 0;
  let deferTimer;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    const context = scope || this;
    const now = Date.now();
    if (now - lastTime > threshold) {
      fn.apply(this, args);
      lastTime = now;
    } else {
      clearTimeout(deferTimer);
      deferTimer = setTimeout(() => {
        lastTime = now;
        fn.apply(context, args);
      }, threshold);
    }
  };
}
function debounce(fn) {
  let ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  let scope = arguments.length > 2 ? arguments[2] : undefined;
  let timer;
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    const context = scope || this;
    clearTimeout(timer);
    timer = setTimeout(function () {
      fn.apply(context, args);
    }, ms);
  };
}
function omit(obj, fields) {
  const shallowCopy = Object.assign({}, obj);
  for (let i = 0; i < fields.length; i += 1) {
    const key = fields[i];
    delete shallowCopy[key];
  }
  return shallowCopy;
}
const createForwardRefComponent = ReactComponent => {
  const forwardRefComponent = (props, ref) => createComponent(ReactComponent, mergeProps(props, {
    forwardedRef: ref
  }));
  return forwardRef(forwardRefComponent);
};

export { createForwardRefComponent, debounce, omit, throttle };
//# sourceMappingURL=index.js.map
