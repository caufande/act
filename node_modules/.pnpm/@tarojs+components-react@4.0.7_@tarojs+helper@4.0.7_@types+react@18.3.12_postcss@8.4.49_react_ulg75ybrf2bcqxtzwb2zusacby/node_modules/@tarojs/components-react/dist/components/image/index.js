import { __rest } from 'tslib';
import './style/index.css.js';
import classNames from 'classnames';
import { createForwardRefComponent } from '../../utils/index.js';
import { useRef, useState, useCallback, useEffect } from '../../utils/hooks.react.js';
import { jsx } from 'react/jsx-runtime';

function Image(props) {
  const imgRef = useRef(null);
  const observer = useRef({});
  const [, setIsLoaded] = useState(false);
  const {
      className,
      style = {},
      src,
      mode,
      onError,
      lazyLoad,
      imgProps,
      forwardedRef
    } = props,
    reset = __rest(props, ["className", "style", "src", "mode", "onError", "lazyLoad", "imgProps", "forwardedRef"]);
  const cls = classNames('taro-img', {
    'taro-img__widthfix': mode === 'widthFix'
  }, className);
  const imgCls = classNames('taro-img__mode-' + (mode || 'scaleToFill').toLowerCase().replace(/\s/g, ''));
  const imageOnLoad = useCallback(e => {
    const {
      onLoad
    } = props;
    Object.defineProperty(e, 'detail', {
      enumerable: true,
      writable: true,
      value: {
        width: e.target.width,
        height: e.target.height
      }
    });
    onLoad && onLoad(e);
  }, [props]);
  useEffect(() => {
    var _a, _b;
    if (lazyLoad) {
      observer.current = new IntersectionObserver(entries => {
        // 异步 api 关系
        if (entries[entries.length - 1].isIntersecting) {
          setIsLoaded(true);
          // findDOMNode(this).children[0].src = src
          imgRef.current.src = src;
        }
      }, {
        rootMargin: '300px 0px'
      });
      (_b = (_a = observer.current).observe) === null || _b === void 0 ? void 0 : _b.call(_a, imgRef.current);
    }
    return () => {
      var _a, _b;
      (_b = (_a = observer.current) === null || _a === void 0 ? void 0 : _a.disconnect) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
  }, [lazyLoad, src]);
  return /*#__PURE__*/jsx("div", {
    className: cls,
    style: style,
    ref: forwardedRef,
    ...reset,
    children: lazyLoad ? /*#__PURE__*/jsx("img", {
      ref: img => imgRef.current = img,
      className: imgCls,
      "data-src": src,
      onLoad: imageOnLoad,
      onError: onError,
      ...imgProps
    }) : /*#__PURE__*/jsx("img", {
      ref: img => imgRef.current = img,
      className: imgCls,
      src: src,
      onLoad: imageOnLoad,
      onError: onError,
      ...imgProps
    })
  });
}
var index = createForwardRefComponent(Image);

export { index as default };
//# sourceMappingURL=index.js.map
