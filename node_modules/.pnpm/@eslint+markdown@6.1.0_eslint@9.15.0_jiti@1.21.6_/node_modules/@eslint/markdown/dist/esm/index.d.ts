export { plugin as default };
export type Block = import("./types.ts").Block;
export type RangeMap = import("./types.ts").RangeMap;
export type Node = import("mdast").Node;
export type ParentNode = import("mdast").Parent;
export type CodeNode = import("mdast").Code;
export type HtmlNode = import("mdast").Html;
export type Message = import("eslint").Linter.LintMessage;
export type Fix = import("eslint").Rule.Fix;
export type Range = import("eslint").AST.Range;
export type RootNode = import("mdast").Root;
export type MarkdownNode = import("mdast").Node;
export type Language = import("@eslint/core").Language;
export type File = import("@eslint/core").File;
export type TraversalStep = import("@eslint/core").TraversalStep;
export type VisitTraversalStep = import("@eslint/core").VisitTraversalStep;
export type TextSourceCode = import("@eslint/core").TextSourceCode;
export type ParseResult = import("@eslint/core").ParseResult<RootNode>;
export type SourceLocation = import("@eslint/core").SourceLocation;
export type SourceRange = import("@eslint/core").SourceRange;
export type OkParseResult = import("@eslint/core").OkParseResult<RootNode>;
export type SyntaxElement = import("@eslint/core").SyntaxElement;
export type ParserMode = "commonmark" | "gfm";
export type RuleModule = import("eslint").Rule.RuleModule;
export type Position = import("unist").Position;
export type TextNode = import("mdast").Text;
export type RulesRecord = import("eslint").Linter.RulesRecord;
export type Config = import("eslint").Linter.Config;
export type Plugin = import("eslint").ESLint.Plugin;
/** @type {Plugin & { languages: Record<string,Language>}} */
declare const plugin: Plugin & {
    languages: Record<string, Language>;
};
