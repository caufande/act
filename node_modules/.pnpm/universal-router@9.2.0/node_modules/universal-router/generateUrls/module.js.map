{"version":3,"file":"module.js","sources":["../src/generateUrls.ts"],"sourcesContent":["/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport {\n  parse,\n  ParseOptions,\n  tokensToFunction,\n  TokensToFunctionOptions,\n  PathFunction,\n} from 'path-to-regexp'\nimport UniversalRouter, { Route, Routes } from './UniversalRouter'\n\nexport interface UrlParams {\n  [paramName: string]: string | number | (string | number)[]\n}\n\nexport interface GenerateUrlsOptions extends ParseOptions, TokensToFunctionOptions {\n  /**\n   * Add a query string to generated url based on unknown route params.\n   */\n  stringifyQueryParams?: (params: UrlParams) => string\n  /**\n   * Generates a unique route name based on all parent routes with the specified separator.\n   */\n  uniqueRouteNameSep?: string\n}\n\n/**\n * Create a url by route name from route path.\n */\ndeclare const generateUrl: (routeName: string, params?: UrlParams) => string\n\ntype GenerateUrl = typeof generateUrl\n\ntype Keys = { [key: string]: boolean }\n\nfunction cacheRoutes(\n  routesByName: Map<string, Route>,\n  route: Route,\n  routes: Routes | null | undefined,\n  name?: string,\n  sep?: string,\n): void {\n  if (route.name && name && routesByName.has(name)) {\n    throw new Error(`Route \"${name}\" already exists`)\n  }\n\n  if (route.name && name) {\n    routesByName.set(name, route)\n  }\n\n  if (routes) {\n    for (let i = 0; i < routes.length; i++) {\n      const childRoute = routes[i]\n      const childName = childRoute.name\n      childRoute.parent = route\n      cacheRoutes(\n        routesByName,\n        childRoute,\n        childRoute.children,\n        name && sep ? (childName ? name + sep + childName : name) : childName,\n        sep,\n      )\n    }\n  }\n}\n\n/**\n * Create a function to generate urls by route names.\n */\nfunction generateUrls(router: UniversalRouter, options?: GenerateUrlsOptions): GenerateUrl {\n  if (!router) {\n    throw new ReferenceError('Router is not defined')\n  }\n\n  const routesByName = new Map<string, Route>()\n  const regexpByRoute = new Map<Route, { toPath: PathFunction<UrlParams>; keys: Keys }>()\n  const opts: GenerateUrlsOptions = { encode: encodeURIComponent, ...options }\n  return (routeName: string, params?: UrlParams): string => {\n    let route = routesByName.get(routeName)\n    if (!route) {\n      routesByName.clear()\n      regexpByRoute.clear()\n      cacheRoutes(\n        routesByName,\n        router.root,\n        router.root.children,\n        router.root.name,\n        opts.uniqueRouteNameSep,\n      )\n\n      route = routesByName.get(routeName)\n      if (!route) {\n        throw new Error(`Route \"${routeName}\" not found`)\n      }\n    }\n\n    let regexp = regexpByRoute.get(route)\n    if (!regexp) {\n      let fullPath = ''\n      let rt: Route | null | undefined = route\n      while (rt) {\n        const path = Array.isArray(rt.path) ? rt.path[0] : rt.path\n        if (path) {\n          fullPath = path + fullPath\n        }\n        rt = rt.parent\n      }\n      const tokens = parse(fullPath, opts)\n      const toPath = tokensToFunction(tokens, opts)\n      const keys: Keys = Object.create(null)\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i]\n        if (typeof token !== 'string') {\n          keys[token.name] = true\n        }\n      }\n      regexp = { toPath, keys }\n      regexpByRoute.set(route, regexp)\n    }\n\n    let url = router.baseUrl + regexp.toPath(params) || '/'\n\n    if (opts.stringifyQueryParams && params) {\n      const queryParams: UrlParams = {}\n      const keys = Object.keys(params)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        if (!regexp.keys[key]) {\n          queryParams[key] = params[key]\n        }\n      }\n      const query = opts.stringifyQueryParams(queryParams)\n      if (query) {\n        url += query.charAt(0) === '?' ? query : `?${query}`\n      }\n    }\n\n    return url\n  }\n}\n\nexport default generateUrls\n"],"names":[],"mappings":";;;;;YA0GM;;;;oBAII;iBACD;;;;wBAIS,oBAAoB;UAChC,UAAU,GAAS,MAAM,CAAC,CAAD;UACzB,SAAS;gBACP;qEAKF,UAAW,YAAY,UAAA;;;;;;;;;;qBAiBd,OAAA;;;;;;AAKb,2CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}