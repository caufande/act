{"version":3,"file":"module.js","sources":["src/UniversalRouter.ts"],"sourcesContent":["/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport {\n  match,\n  Path,\n  Match,\n  MatchFunction,\n  ParseOptions,\n  TokensToRegexpOptions,\n  RegexpToFunctionOptions,\n} from 'path-to-regexp'\n\n/**\n * In addition to a URL path string, any arbitrary data can be passed to\n * the `router.resolve()` method, that becomes available inside action functions.\n */\nexport interface RouterContext {\n  [propName: string]: any\n}\n\nexport interface ResolveContext extends RouterContext {\n  /**\n   * URL which was transmitted to `router.resolve()`.\n   */\n  pathname: string\n}\n\n/**\n * Params is a key/value object that represents extracted URL parameters.\n */\nexport interface RouteParams {\n  [paramName: string]: string | string[]\n}\n\nexport type RouteResult<T> = T | null | undefined | Promise<T | null | undefined>\n\nexport interface RouteContext<R = any, C extends RouterContext = RouterContext>\n  extends ResolveContext {\n  /**\n   * Current router instance.\n   */\n  router: UniversalRouter<R, C>\n  /**\n   * Matched route object.\n   */\n  route: Route<R, C>\n  /**\n   * Base URL path relative to the path of the current route.\n   */\n  baseUrl: string\n  /**\n   * Matched path.\n   */\n  path: string\n  /**\n   * Matched path params.\n   */\n  params: RouteParams\n  /**\n   * Middleware style function which can continue resolving.\n   */\n  next: (resume?: boolean) => Promise<R>\n}\n\n/**\n * A Route is a singular route in your application. It contains a path, an\n * action function, and optional children which are an array of Route.\n * @template C User context that is made union with RouterContext.\n * @template R Result that every action function resolves to.\n * If the action returns a Promise, R can be the type the Promise resolves to.\n */\nexport interface Route<R = any, C extends RouterContext = RouterContext> {\n  /**\n   * A string, array of strings, or a regular expression. Defaults to an empty string.\n   */\n  path?: Path\n  /**\n   * A unique string that can be used to generate the route URL.\n   */\n  name?: string\n  /**\n   * The link to the parent route is automatically populated by the router. Useful for breadcrumbs.\n   */\n  parent?: Route<R, C> | null\n  /**\n   * An array of Route objects. Nested routes are perfect to be used in middleware routes.\n   */\n  children?: Routes<R, C> | null\n  /**\n   * Action method should return anything except `null` or `undefined` to be resolved by router\n   * otherwise router will throw `Page not found` error if all matched routes returned nothing.\n   */\n  action?: (context: RouteContext<R, C>, params: RouteParams) => RouteResult<R>\n  /**\n   * The route path match function. Used for internal caching.\n   */\n  match?: MatchFunction<RouteParams>\n}\n\n/**\n * Routes is an array of type Route.\n * @template C User context that is made union with RouterContext.\n * @template R Result that every action function resolves to.\n * If the action returns a Promise, R can be the type the Promise resolves to.\n */\nexport type Routes<R = any, C extends RouterContext = RouterContext> = Array<Route<R, C>>\n\nexport type ResolveRoute<R = any, C extends RouterContext = RouterContext> = (\n  context: RouteContext<R, C>,\n  params: RouteParams,\n) => RouteResult<R>\n\nexport type RouteError = Error & { status?: number }\n\nexport type ErrorHandler<R = any> = (error: RouteError, context: ResolveContext) => RouteResult<R>\n\nexport interface RouterOptions<R = any, C extends RouterContext = RouterContext>\n  extends ParseOptions,\n    TokensToRegexpOptions,\n    RegexpToFunctionOptions {\n  context?: C\n  baseUrl?: string\n  resolveRoute?: ResolveRoute<R, C>\n  errorHandler?: ErrorHandler<R>\n}\n\nexport interface RouteMatch<R = any, C extends RouterContext = RouterContext> {\n  route: Route<R, C>\n  baseUrl: string\n  path: string\n  params: RouteParams\n}\n\nfunction decode(val: string): string {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchRoute<R, C extends RouterContext>(\n  route: Route<R, C>,\n  baseUrl: string,\n  options: RouterOptions<R, C>,\n  pathname: string,\n  parentParams?: RouteParams,\n): Iterator<RouteMatch<R, C>, false, Route<R, C> | false> {\n  let matchResult: Match<RouteParams>\n  let childMatches: Iterator<RouteMatch<R, C>, false, Route<R, C> | false> | null\n  let childIndex = 0\n\n  return {\n    next(routeToSkip: Route<R, C> | false): IteratorResult<RouteMatch<R, C>, false> {\n      if (route === routeToSkip) {\n        return { done: true, value: false }\n      }\n\n      if (!matchResult) {\n        const rt = route\n        const end = !rt.children\n        if (!rt.match) {\n          rt.match = match<RouteParams>(rt.path || '', { end, ...options })\n        }\n        matchResult = rt.match(pathname)\n\n        if (matchResult) {\n          const { path } = matchResult\n          matchResult.path = !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path\n          matchResult.params = { ...parentParams, ...matchResult.params }\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: matchResult.path,\n              params: matchResult.params,\n            },\n          }\n        }\n      }\n\n      if (matchResult && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute<R, C>(\n              childRoute,\n              baseUrl + matchResult.path,\n              options,\n              pathname.substr(matchResult.path.length),\n              matchResult.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true, value: false }\n    },\n  }\n}\n\nfunction resolveRoute<R = any, C extends RouterContext = object>(\n  context: RouteContext<R, C>,\n  params: RouteParams,\n): RouteResult<R> {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nfunction isChildRoute<R = any, C extends RouterContext = object>(\n  parentRoute: Route<R, C> | false,\n  childRoute: Route<R, C>,\n): boolean {\n  let route: Route<R, C> | null | undefined = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nclass UniversalRouter<R = any, C extends RouterContext = RouterContext> {\n  root: Route<R, C>\n\n  baseUrl: string\n\n  options: RouterOptions<R, C>\n\n  constructor(routes: Routes<R, C> | Route<R, C>, options?: RouterOptions<R, C>) {\n    if (!routes || typeof routes !== 'object') {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.options = { decode, ...options }\n    this.baseUrl = this.options.baseUrl || ''\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  /**\n   * Traverses the list of routes in the order they are defined until it finds\n   * the first route that matches provided URL path string and whose action function\n   * returns anything other than `null` or `undefined`.\n   */\n  resolve(pathnameOrContext: string | ResolveContext): Promise<RouteResult<R>> {\n    const context: ResolveContext = {\n      router: this,\n      ...this.options.context,\n      ...(typeof pathnameOrContext === 'string'\n        ? { pathname: pathnameOrContext }\n        : pathnameOrContext),\n    }\n    const matchResult = matchRoute(\n      this.root,\n      this.baseUrl,\n      this.options,\n      context.pathname.substr(this.baseUrl.length),\n    )\n    const resolve = this.options.resolveRoute || resolveRoute\n    let matches: IteratorResult<RouteMatch<R, C>, false>\n    let nextMatches: IteratorResult<RouteMatch<R, C>, false> | null\n    let currentContext = context\n\n    function next(\n      resume: boolean,\n      parent: Route<R, C> | false = !matches.done && matches.value.route,\n      prevResult?: RouteResult<R>,\n    ): Promise<RouteResult<R>> {\n      const routeToSkip = prevResult === null && !matches.done && matches.value.route\n      matches = nextMatches || matchResult.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error: RouteError = new Error('Route not found')\n        error.status = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = { ...context, ...matches.value }\n\n      return Promise.resolve(\n        resolve(currentContext as RouteContext<R, C>, matches.value.params),\n      ).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        if (this.options.errorHandler) {\n          return this.options.errorHandler(error, currentContext)\n        }\n        throw error\n      })\n  }\n}\n\nexport default UniversalRouter\n"],"names":[],"mappings":";;;;qBAsUqB;;;;;;;;AASrB,mBAAA,MAAA,SAAA,SAAA,UAAA,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}