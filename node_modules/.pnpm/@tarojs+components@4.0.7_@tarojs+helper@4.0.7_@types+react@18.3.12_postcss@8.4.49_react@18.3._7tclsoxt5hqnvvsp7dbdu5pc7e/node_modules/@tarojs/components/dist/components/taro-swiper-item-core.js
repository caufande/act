import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { c as classnames } from './index2.js';
import { h as handleStencilNodes } from './helper.js';

const SwiperItem = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.itemId = undefined;
  }
  //Note: 由于 swiper.js 会通过子元素中的 class 来判断是否为 swiper-slide，所以这里需要在 connectedCallback 中添加 swiper-slide 类名
  connectedCallback() {
    this.el.className = classnames(this.el.className, 'swiper-slide');
  }
  componentDidRender() {
    handleStencilNodes(this.el);
  }
  render() {
    return (h(Host, { "item-id": this.itemId }, h("slot", null)));
  }
  get el() { return this; }
}, [4, "taro-swiper-item-core", {
    "itemId": [1, "item-id"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["taro-swiper-item-core"];
  components.forEach(tagName => { switch (tagName) {
    case "taro-swiper-item-core":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, SwiperItem);
      }
      break;
  } });
}

const TaroSwiperItemCore = SwiperItem;
const defineCustomElement = defineCustomElement$1;

export { TaroSwiperItemCore, defineCustomElement };
